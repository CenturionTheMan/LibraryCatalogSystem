/*
Deployment script for LibraryDataBase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LibraryDataBase"
:setvar DefaultFilePrefix "LibraryDataBase"
:setvar DefaultDataPath "C:\Users\dzied\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\dzied\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
-- Remove tables
DROP TABLE IF EXISTS dbo.BorrowRequests;
DROP TABLE IF EXISTS dbo.ResourceCopy;
DROP TABLE IF EXISTS dbo.LibraryResource;
DROP TABLE IF EXISTS dbo.Users;

-- Remove views
DROP VIEW IF EXISTS UserDetailsWithBorrowedResources;
DROP VIEW IF EXISTS DelayedBorrowersView;
DROP VIEW IF EXISTS ApprovedBorrowRequests;
DROP VIEW IF EXISTS SummarisedResources;
DROP VIEW IF EXISTS PendingBorrowRequests;
GO

GO
PRINT N'Rename refactoring operation with key 9536cd94-d58f-429e-9b2a-9fc2c2075816 is skipped, element [dbo].[Resources] (SqlTable) will not be renamed to LibraryResource';


GO
PRINT N'Rename refactoring operation with key 07386efd-b748-4b24-8975-5fd550761af4 is skipped, element [dbo].[ResourceCopies] (SqlTable) will not be renamed to ResourceCopy';


GO
PRINT N'Creating Table [dbo].[BorrowRequests]...';


GO
CREATE TABLE [dbo].[BorrowRequests] (
    [RequestID]   INT          IDENTITY (1, 1) NOT NULL,
    [UserID]      INT          NOT NULL,
    [ResourceID]  INT          NOT NULL,
    [RequestDate] DATE         NOT NULL,
    [CopyID]      INT          NULL,
    [DueDate]     DATE         NULL,
    [Status]      VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([RequestID] ASC)
);


GO
PRINT N'Creating Table [dbo].[LibraryResource]...';


GO
CREATE TABLE [dbo].[LibraryResource] (
    [ResourceID]    INT           IDENTITY (1, 1) NOT NULL,
    [Title]         VARCHAR (255) NOT NULL,
    [Author]        VARCHAR (255) NOT NULL,
    [YearPublished] INT           NOT NULL,
    [ResourceType]  VARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ResourceID] ASC)
);


GO
PRINT N'Creating Table [dbo].[LibraryUser]...';


GO
CREATE TABLE [dbo].[LibraryUser] (
    [UserID]    INT           IDENTITY (1, 1) NOT NULL,
    [FirstName] VARCHAR (255) NOT NULL,
    [LastName]  VARCHAR (255) NOT NULL,
    [Login]     VARCHAR (255) NOT NULL,
    [Password]  VARCHAR (255) NOT NULL,
    [UserType]  VARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([UserID] ASC),
    UNIQUE NONCLUSTERED ([Login] ASC)
);


GO
PRINT N'Creating Table [dbo].[ResourceCopy]...';


GO
CREATE TABLE [dbo].[ResourceCopy] (
    [CopyID]     INT IDENTITY (1, 1) NOT NULL,
    [ResourceID] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([CopyID] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BorrowRequests]...';


GO
ALTER TABLE [dbo].[BorrowRequests] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[LibraryUser] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BorrowRequests]...';


GO
ALTER TABLE [dbo].[BorrowRequests] WITH NOCHECK
    ADD FOREIGN KEY ([CopyID]) REFERENCES [dbo].[ResourceCopy] ([CopyID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BorrowRequests]...';


GO
ALTER TABLE [dbo].[BorrowRequests] WITH NOCHECK
    ADD FOREIGN KEY ([ResourceID]) REFERENCES [dbo].[LibraryResource] ([ResourceID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[ResourceCopy]...';


GO
ALTER TABLE [dbo].[ResourceCopy] WITH NOCHECK
    ADD FOREIGN KEY ([ResourceID]) REFERENCES [dbo].[LibraryResource] ([ResourceID]);


GO
PRINT N'Creating View [dbo].[ApprovedBorrowRequests]...';


GO

CREATE VIEW ApprovedBorrowRequests AS
SELECT
    BR.RequestID,
    U.FirstName,
    U.LastName,
    R.Title AS BorrowedResource,
    BR.RequestDate,
    BR.DueDate,
    BR.Status
FROM BorrowRequests BR
JOIN LibraryUser U ON BR.UserID = U.UserID
JOIN LibraryResource R ON BR.ResourceID = R.ResourceID
WHERE BR.Status = 'Approved';
GO
PRINT N'Creating View [dbo].[DelayedBorrowersView]...';


GO

CREATE VIEW DelayedBorrowersView AS
SELECT
    U.UserID,
    U.FirstName,
    U.LastName,
    BR.RequestID,
    R.Title AS BorrowedResource,
    BR.DueDate,
    DATEDIFF(DAY, BR.DueDate, GETDATE()) AS DaysLate
FROM LibraryUser U
JOIN BorrowRequests BR ON U.UserID = BR.UserID
JOIN ResourceCopy RC ON BR.CopyID = RC.CopyID
JOIN LibraryResource R ON BR.ResourceID = R.ResourceID
WHERE BR.Status = 'Returned' AND BR.DueDate < GETDATE();
GO
PRINT N'Creating View [dbo].[PendingBorrowRequests]...';


GO

CREATE VIEW PendingBorrowRequests AS
SELECT
    BR.RequestID,
    U.FirstName,
    U.LastName,
    R.Title AS RequestedResource,
    BR.RequestDate,
    BR.DueDate
FROM BorrowRequests BR
JOIN LibraryUser U ON BR.UserID = U.UserID
JOIN LibraryResource R ON BR.ResourceID = R.ResourceID
WHERE BR.Status = 'Pending';
GO
PRINT N'Creating View [dbo].[SummarisedResources]...';


GO


----------------------------------------------------------------------------- VIEWS
CREATE VIEW SummarisedResources AS
SELECT
    R.ResourceID,
    R.Title,
    COUNT(RC.CopyID) AS TotalCopies,
    COUNT(CASE WHEN BR.Status = 'Approved' THEN 1 END) AS BorrowedCopies
FROM LibraryResource R
LEFT JOIN ResourceCopy RC ON R.ResourceID = RC.ResourceID
LEFT JOIN BorrowRequests BR ON RC.CopyID = BR.CopyID
GROUP BY R.ResourceID, R.Title;
GO
PRINT N'Creating View [dbo].[UserDetailsWithBorrowedResources]...';


GO

CREATE VIEW UserDetailsWithBorrowedResources AS
SELECT
    U.UserID,
    U.FirstName,
    U.LastName,
    U.Login,
    U.UserType,
    BR.RequestID,
    BR.RequestDate,
    BR.DueDate,
    R.Title AS BorrowedResource
FROM LibraryUser U
JOIN BorrowRequests BR ON U.UserID = BR.UserID
JOIN ResourceCopy RC ON BR.CopyID = RC.CopyID
JOIN LibraryResource R ON BR.ResourceID = R.ResourceID
WHERE BR.Status = 'Approved';
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9536cd94-d58f-429e-9b2a-9fc2c2075816')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9536cd94-d58f-429e-9b2a-9fc2c2075816')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '07386efd-b748-4b24-8975-5fd550761af4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('07386efd-b748-4b24-8975-5fd550761af4')

GO

GO
------------------------------------------------------------------------------- EXAMPLE DATA
-- LOAD EXAMPLE DATA VIA C# APP!
---- Users
--INSERT INTO Users (FirstName, LastName, Login, Password, UserType) VALUES
--('Adam', 'Nowak', 'anowak', 'pass123', 'Client'),
--('Ewa', 'Kowalska', 'ekowalska', 'securepass', 'Client'),
--('Mateusz', 'Wójcik', 'mwojcik', 'pass456', 'Client'),
--('Karolina', 'Lis', 'klis', 'strongpass', 'Client'),
--('Marcin', 'Kaczmarek', 'mkaczmarek', 'userpass', 'Client'),
--('Alicja', 'Pawlak', 'apawlak', 'pass789', 'Client'),
--('Michał', 'Duda', 'mduda', 'testpass', 'Client'),
--('Katarzyna', 'Szymańska', 'kszymanska', 'mypassword', 'Client'),
--('Piotr', 'Kowalczyk', 'pkowalczyk', 'pass1234', 'Client'),
--('Anna', 'Jankowska', 'ajankowska', 'pass5678', 'Client'),
--('Tomasz', 'Wiśniewski', 'twisniewski', 'securepass', 'Client'),
--('Magdalena', 'Zając', 'mzajac', 'pass987', 'Client'),
--('Grzegorz', 'Kowal', 'gkowal', 'testpass', 'Employee'),
--('Agnieszka', 'Nowicka', 'anowicka', 'mypass', 'Employee'),
--('Łukasz', 'Sikora', 'lsikora', 'pass654', 'Employee');

---- Resources
--INSERT INTO Resources (Title, Author, YearPublished, ResourceType) VALUES
--('Database Management', 'John Smith', 2020, 'Book'),
--('Web Development Basics', 'Alice Johnson', 2019, 'Book'),
--('Data Science in Practice', 'Michael Brown', 2022, 'Magazine'),
--('Java Programming', 'Emily Davis', 2021, 'Book'),
--('Introduction to Python', 'Daniel Wilson', 2018, 'Magazine'),
--('Artificial Intelligence Fundamentals', 'Sophie White', 2020, 'Book'),
--('Network Security', 'Andrew Miller', 2019, 'Book'),
--('Software Engineering Principles', 'Olivia Taylor', 2022, 'Magazine'),
--('Machine Learning Applications', 'William Brown', 2021, 'Book'),
--('Mobile App Development', 'Emma Turner', 2018, 'Magazine');

---- ResourceCopies
--INSERT INTO ResourceCopies (ResourceID) VALUES
--(1),
--(1),
--(2),
--(3),
--(4),
--(5),
--(6),
--(7),
--(8),
--(9),
--(10),
--(1),
--(2),
--(3),
--(4),
--(5),
--(6),
--(7),
--(8),
--(9),
--(10),
--(1),
--(2),
--(3),
--(4),
--(5),
--(6),
--(7),
--(8),
--(9),
--(10),
--(1),
--(2),
--(3),
--(4),
--(5),
--(6),
--(7),
--(8),
--(9),
--(10);

---- BorrowRequests
--INSERT INTO BorrowRequests (UserID, ResourceID, RequestDate, CopyID, DueDate, Status) VALUES
--(1, 1, '2023-01-01', 1, '2023-01-15', 'Approved'),
--(3, 2, '2023-01-02', 3, '2023-01-16', 'Pending'),
--(5, 3, '2023-01-03', NULL, NULL, 'Pending'),
--(2, 4, '2023-01-04', NULL, '2023-11-29', 'Approved'),
--(4, 5, '2023-01-05', 5, '2023-01-20', 'Returned'),
--(6, 6, '2023-01-06', 6, '2023-01-21', 'Approved'),
--(8, 7, '2023-01-07', 8, '2023-01-22', 'Pending'),
--(10, 8, '2023-01-08', NULL, '2024-01-01', 'Approved'),
--(7, 9, '2023-01-09', NULL, NULL, 'Pending'),
--(9, 10, '2023-01-10', 10, '2023-01-25', 'Approved'),
--(11, 1, '2023-01-11', 11, '2023-01-26', 'Returned'),
--(7, 2, '2023-01-12', 12, '2023-01-27', 'Pending'),
--(9, 3, '2023-01-13', NULL, NULL, 'Pending'),
--(12, 4, '2023-01-14', 13, '2023-01-28', 'Approved'),
--(1, 5, '2023-01-15', 14, '2023-01-29', 'Approved'),
--(4, 6, '2023-01-16', 15, '2023-01-30', 'Returned'),
--(3, 7, '2023-01-17', NULL, '2024-02-01', 'Approved'),
--(5, 8, '2023-01-18', 16, '2023-01-31', 'Pending'),
--(4, 9, '2023-01-19', 17, '2023-02-01', 'Returned'),
--(1, 10, '2023-01-20', 18, '2023-02-02', 'Pending');
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.BorrowRequests'), OBJECT_ID(N'dbo.ResourceCopy'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
